{"ast":null,"code":"var _jsxFileName = \"/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport Carousel from \"nuka-carousel\";\nimport reviews from \"../../data/reviews.json\"; // CONFIG DO NOT REMOVE\n// eslint-disable-next-line complexity\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst CarouselConfig = () => {\n  _s();\n\n  const [animation, setAnimation] = useState(undefined);\n  const [autoplay, setAutoplay] = useState(false);\n  const [cellAlign, setCellAlign] = useState(\"left\");\n  const [heightMode, setHeightMode] = useState(\"max\");\n  const [length, setLength] = useState(colors.length);\n  const [scrollMode, setScrollMode] = useState(\"remainder\");\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [slidesToScroll, setSlidesToScroll] = useState(1);\n  const [slidesToShow, setSlidesToShow] = useState(1);\n  const [transitionMode, setTransitionMode] = useState(\"scroll\");\n  const [underlineHeader, setUnderlineHeader] = useState(false);\n  const [withoutControls, setWithoutControls] = useState(false);\n  const [wrapAround, setWrapAround] = useState(false);\n  const [zoomScale, setZoomScale] = useState(0.5);\n  const handleImageClick = useCallback(() => {\n    setUnderlineHeader(prevUnderlineHeader => !prevUnderlineHeader);\n  }, []);\n\n  const renderTopControls = currentSlide => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: \"Helvetica\",\n        color: \"#555\",\n        textDecoration: \"none\"\n      },\n      children: [\"Jane Doe: \", Math.ceil(currentSlide) + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this);\n  };\n\n  const slides = reviews.slice(0, length).map(index => /*#__PURE__*/_jsxDEV(\"img\", {\n    src: `${index.image}${index + 1}`,\n    alt: `Slide ${index + 1}`,\n    onClick: () => handleImageClick(),\n    style: {\n      height: heightMode === \"current\" ? 100 * (index + 1) : 400\n    }\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        margin: \"auto\",\n        color: \"grey\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Carousel, {\n        renderCenterLeftControls: ({\n          previousSlide\n        }) => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"none\",\n            color: \"purple\"\n          },\n          onClick: previousSlide,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-angle-left fa-2x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this),\n        renderCenterRightControls: ({\n          nextSlide\n        }) => /*#__PURE__*/_jsxDEV(\"button\", {\n          style: {\n            background: \"none\",\n            color: \"purple\"\n          },\n          onClick: nextSlide,\n          children: /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-angle-right fa-2x\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this),\n        animation: animation,\n        autoplay: autoplay,\n        cellAlign: cellAlign,\n        heightMode: heightMode,\n        scrollMode: scrollMode,\n        slideIndex: slideIndex,\n        slideListMargin: 0,\n        slidesToScroll: slidesToScroll,\n        slidesToShow: slidesToShow,\n        transitionMode: transitionMode,\n        withoutControls: withoutControls,\n        wrapAround: wrapAround,\n        zoomScale: Number(zoomScale || 0) // renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n        //   return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n        // }}\n        ,\n        renderTopCenterControls: ({\n          currentSlide\n        }) => renderTopControls(currentSlide),\n        children: slides\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(CarouselConfig, \"birTixpvl6TFW36rZO6u7JAlIU8=\");\n\n_c = CarouselConfig;\nexport default CarouselConfig; // import React, { useState, useCallback } from \"react\";\n// import Carousel from \"nuka-carousel\";\n// import reviews from \"../../data/reviews.json\";\n// // CONFIG DO NOT REMOVE\n// const colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// // eslint-disable-next-line complexity\n// const CarouselConfig = () => {\n//   const [animation, setAnimation] = useState(undefined);\n//   const [autoplay, setAutoplay] = useState(false);\n//   const [cellAlign, setCellAlign] = useState(\"left\");\n//   const [heightMode, setHeightMode] = useState(\"max\");\n//   const [length, setLength] = useState(colors.length);\n//   const [scrollMode, setScrollMode] = useState(\"remainder\");\n//   const [slideIndex, setSlideIndex] = useState(0);\n//   const [slidesToScroll, setSlidesToScroll] = useState(1);\n//   const [slidesToShow, setSlidesToShow] = useState(1);\n//   const [transitionMode, setTransitionMode] = useState(\"scroll\");\n//   const [underlineHeader, setUnderlineHeader] = useState(false);\n//   const [withoutControls, setWithoutControls] = useState(false);\n//   const [wrapAround, setWrapAround] = useState(false);\n//   const [zoomScale, setZoomScale] = useState(0.5);\n//   const handleImageClick = useCallback(() => {\n//     setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n//   }, []);\n//   const renderTopControls = (currentSlide) => {\n//     return (\n//       <div\n//         style={{\n//           fontFamily: \"Helvetica\",\n//           color: \"#fff\",\n//           textDecoration: underlineHeader ? \"underline\" : \"none\",\n//         }}\n//       >\n//         Jane Doe: {Math.ceil(currentSlide) + 1}\n//       </div>\n//     );\n//   };\n//   const slides = colors.slice(0, length).map((color, index) => (\n//     <img\n//       src={`${reviews.image}${color}${index + 1}`}\n//       alt={`Slide ${index + 1}`}\n//       key={color}\n//       onClick={() => handleImageClick()}\n//       style={{\n//         height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n//       }}\n//     />\n//   ));\n//   return (\n//     <>\n//       <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n//         <Carousel\n//           renderCenterLeftControls={({ previousSlide }) => (\n//             <button\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={previousSlide}\n//             >\n//               <i className=\"fa fa-angle-left fa-2x\" />\n//             </button>\n//           )}\n//           renderCenterRightControls={({ nextSlide }) => (\n//             <button\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={nextSlide}\n//             >\n//               <i className=\"fa fa-angle-right fa-2x\" />\n//             </button>\n//           )}\n//           animation={animation}\n//           autoplay={autoplay}\n//           cellAlign={cellAlign}\n//           heightMode={heightMode}\n//           scrollMode={scrollMode}\n//           slideIndex={slideIndex}\n//           slideListMargin={0}\n//           slidesToScroll={slidesToScroll}\n//           slidesToShow={slidesToShow}\n//           transitionMode={transitionMode}\n//           withoutControls={withoutControls}\n//           wrapAround={wrapAround}\n//           zoomScale={Number(zoomScale || 0)}\n//           renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n//             return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n//           }}\n//           renderTopCenterControls={({ currentSlide }) =>\n//             renderTopControls(currentSlide)\n//           }\n//         >\n//           {slides}\n//         </Carousel>\n//       </div>\n//     </>\n//   );\n// };\n// export default CarouselConfig;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarouselConfig\");","map":{"version":3,"sources":["/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js"],"names":["React","useState","useCallback","Carousel","reviews","CarouselConfig","animation","setAnimation","undefined","autoplay","setAutoplay","cellAlign","setCellAlign","heightMode","setHeightMode","length","setLength","colors","scrollMode","setScrollMode","slideIndex","setSlideIndex","slidesToScroll","setSlidesToScroll","slidesToShow","setSlidesToShow","transitionMode","setTransitionMode","underlineHeader","setUnderlineHeader","withoutControls","setWithoutControls","wrapAround","setWrapAround","zoomScale","setZoomScale","handleImageClick","prevUnderlineHeader","renderTopControls","currentSlide","fontFamily","color","textDecoration","Math","ceil","slides","slice","map","index","image","height","width","margin","previousSlide","background","nextSlide","Number"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport Carousel from \"nuka-carousel\";\nimport reviews from \"../../data/reviews.json\";\n\n// CONFIG DO NOT REMOVE\n// eslint-disable-next-line complexity\nconst CarouselConfig = () => {\n  const [animation, setAnimation] = useState(undefined);\n  const [autoplay, setAutoplay] = useState(false);\n  const [cellAlign, setCellAlign] = useState(\"left\");\n  const [heightMode, setHeightMode] = useState(\"max\");\n  const [length, setLength] = useState(colors.length);\n  const [scrollMode, setScrollMode] = useState(\"remainder\");\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [slidesToScroll, setSlidesToScroll] = useState(1);\n  const [slidesToShow, setSlidesToShow] = useState(1);\n  const [transitionMode, setTransitionMode] = useState(\"scroll\");\n  const [underlineHeader, setUnderlineHeader] = useState(false);\n  const [withoutControls, setWithoutControls] = useState(false);\n  const [wrapAround, setWrapAround] = useState(false);\n  const [zoomScale, setZoomScale] = useState(0.5);\n\n  const handleImageClick = useCallback(() => {\n    setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n  }, []);\n\n  const renderTopControls = (currentSlide) => {\n    return (\n      <div\n        style={{\n          fontFamily: \"Helvetica\",\n          color: \"#555\",\n          textDecoration: \"none\",\n        }}\n      >\n        Jane Doe: {Math.ceil(currentSlide) + 1}\n      </div>\n    );\n  };\n\n  const slides = reviews.slice(0, length).map((index) => (\n    <img\n      src={`${index.image}${index + 1}`}\n      alt={`Slide ${index + 1}`}\n      key={index}\n      onClick={() => handleImageClick()}\n      style={{\n        height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n      }}\n    />\n  ));\n\n  return (\n    <>\n      <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n        <Carousel\n          renderCenterLeftControls={({ previousSlide }) => (\n            <button\n              style={{ background: \"none\", color: \"purple\" }}\n              onClick={previousSlide}\n            >\n              <i className=\"fa fa-angle-left fa-2x\" />\n            </button>\n          )}\n          renderCenterRightControls={({ nextSlide }) => (\n            <button\n              style={{ background: \"none\", color: \"purple\" }}\n              onClick={nextSlide}\n            >\n              <i className=\"fa fa-angle-right fa-2x\" />\n            </button>\n          )}\n          animation={animation}\n          autoplay={autoplay}\n          cellAlign={cellAlign}\n          heightMode={heightMode}\n          scrollMode={scrollMode}\n          slideIndex={slideIndex}\n          slideListMargin={0}\n          slidesToScroll={slidesToScroll}\n          slidesToShow={slidesToShow}\n          transitionMode={transitionMode}\n          withoutControls={withoutControls}\n          wrapAround={wrapAround}\n          zoomScale={Number(zoomScale || 0)}\n          // renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n          //   return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n          // }}\n          renderTopCenterControls={({ currentSlide }) =>\n            renderTopControls(currentSlide)\n          }\n        >\n          {slides}\n        </Carousel>\n      </div>\n    </>\n  );\n};\n\nexport default CarouselConfig;\n\n// import React, { useState, useCallback } from \"react\";\n// import Carousel from \"nuka-carousel\";\n// import reviews from \"../../data/reviews.json\";\n\n// // CONFIG DO NOT REMOVE\n// const colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// // eslint-disable-next-line complexity\n// const CarouselConfig = () => {\n//   const [animation, setAnimation] = useState(undefined);\n//   const [autoplay, setAutoplay] = useState(false);\n//   const [cellAlign, setCellAlign] = useState(\"left\");\n//   const [heightMode, setHeightMode] = useState(\"max\");\n//   const [length, setLength] = useState(colors.length);\n//   const [scrollMode, setScrollMode] = useState(\"remainder\");\n//   const [slideIndex, setSlideIndex] = useState(0);\n//   const [slidesToScroll, setSlidesToScroll] = useState(1);\n//   const [slidesToShow, setSlidesToShow] = useState(1);\n//   const [transitionMode, setTransitionMode] = useState(\"scroll\");\n//   const [underlineHeader, setUnderlineHeader] = useState(false);\n//   const [withoutControls, setWithoutControls] = useState(false);\n//   const [wrapAround, setWrapAround] = useState(false);\n//   const [zoomScale, setZoomScale] = useState(0.5);\n\n//   const handleImageClick = useCallback(() => {\n//     setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n//   }, []);\n\n//   const renderTopControls = (currentSlide) => {\n//     return (\n//       <div\n//         style={{\n//           fontFamily: \"Helvetica\",\n//           color: \"#fff\",\n//           textDecoration: underlineHeader ? \"underline\" : \"none\",\n//         }}\n//       >\n//         Jane Doe: {Math.ceil(currentSlide) + 1}\n//       </div>\n//     );\n//   };\n\n//   const slides = colors.slice(0, length).map((color, index) => (\n//     <img\n//       src={`${reviews.image}${color}${index + 1}`}\n//       alt={`Slide ${index + 1}`}\n//       key={color}\n//       onClick={() => handleImageClick()}\n//       style={{\n//         height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n//       }}\n//     />\n//   ));\n\n//   return (\n//     <>\n//       <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n//         <Carousel\n//           renderCenterLeftControls={({ previousSlide }) => (\n//             <button\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={previousSlide}\n//             >\n//               <i className=\"fa fa-angle-left fa-2x\" />\n//             </button>\n//           )}\n//           renderCenterRightControls={({ nextSlide }) => (\n//             <button\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={nextSlide}\n//             >\n//               <i className=\"fa fa-angle-right fa-2x\" />\n//             </button>\n//           )}\n//           animation={animation}\n//           autoplay={autoplay}\n//           cellAlign={cellAlign}\n//           heightMode={heightMode}\n//           scrollMode={scrollMode}\n//           slideIndex={slideIndex}\n//           slideListMargin={0}\n//           slidesToScroll={slidesToScroll}\n//           slidesToShow={slidesToShow}\n//           transitionMode={transitionMode}\n//           withoutControls={withoutControls}\n//           wrapAround={wrapAround}\n//           zoomScale={Number(zoomScale || 0)}\n//           renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n//             return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n//           }}\n//           renderTopCenterControls={({ currentSlide }) =>\n//             renderTopControls(currentSlide)\n//           }\n//         >\n//           {slides}\n//         </Carousel>\n//       </div>\n//     </>\n//   );\n// };\n\n// export default CarouselConfig;\n"]},"metadata":{},"sourceType":"module"}