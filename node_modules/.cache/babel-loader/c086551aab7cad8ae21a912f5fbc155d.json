{"ast":null,"code":"var _jsxFileName = \"/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useCallback } from \"react\";\nimport Carousel from \"nuka-carousel\";\nimport ReactDom from \"react-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [\"7732bb\", \"047cc0\", \"00884b\", \"e3bc13\", \"db7c00\"]; // eslint-disable-next-line complexity\n\nconst CarouselConfig = () => {\n  _s();\n\n  const handleImageClick = useCallback(() => {\n    setUnderlineHeader(prevUnderlineHeader => !prevUnderlineHeader);\n  }, []);\n\n  const renderTopControls = currentSlide => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: \"Helvetica\",\n        color: \"#fff\",\n        textDecoration: underlineHeader ? \"underline\" : \"none\"\n      },\n      children: [\"Nuka Carousel: Slide \", Math.ceil(currentSlide) + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  };\n\n  const slides = colors.slice(0, length).map((color, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n    src: `https://via.placeholder.com/400/${color}/ffffff/&text=slide${index + 1}`,\n    alt: `Slide ${index + 1}`,\n    onClick: () => handleImageClick(),\n    style: {\n      height: heightMode === \"current\" ? 100 * (index + 1) : 400\n    }\n  }, color, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50%\",\n        margin: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Nuka Carousel Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Carousel // animation={animation}\n      // autoplay={autoplay}\n      // cellAlign={cellAlign}\n      // heightMode={heightMode}\n      // scrollMode={scrollMode}\n      // slideIndex={slideIndex}\n      // slideListMargin={0}\n      // slidesToScroll={slidesToScroll}\n      // slidesToShow={slidesToShow}\n      // transitionMode={transitionMode}\n      // withoutControls={withoutControls}\n      // wrapAround={wrapAround}\n      // zoomScale={Number(zoomScale || 0)}\n      , {\n        renderAnnounceSlideMessage: ({\n          currentSlide,\n          slideCount\n        }) => {\n          return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n        },\n        renderTopCenterControls: ({\n          currentSlide\n        }) => renderTopControls(currentSlide),\n        children: slides\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(CarouselConfig, \"Sm1D1twOBXw229vfZIghzzAwNXY=\");\n\n_c = CarouselConfig;\nexport default CarouselConfig;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarouselConfig\");","map":{"version":3,"sources":["/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js"],"names":["React","useState","useCallback","Carousel","ReactDom","colors","CarouselConfig","handleImageClick","setUnderlineHeader","prevUnderlineHeader","renderTopControls","currentSlide","fontFamily","color","textDecoration","underlineHeader","Math","ceil","slides","slice","length","map","index","height","heightMode","width","margin","textAlign","slideCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,WAA1B,QAA6C,OAA7C;AACA,OAAOC,QAAP,MAAqB,eAArB;AACA,OAAOC,QAAP,MAAqB,WAArB;;;AAEA,MAAMC,MAAM,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,CAAf,C,CACA;;AACA,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,gBAAgB,GAAGL,WAAW,CAAC,MAAM;AACzCM,IAAAA,kBAAkB,CAAEC,mBAAD,IAAyB,CAACA,mBAA3B,CAAlB;AACD,GAFmC,EAEjC,EAFiC,CAApC;;AAIA,QAAMC,iBAAiB,GAAIC,YAAD,IAAkB;AAC1C,wBACE;AACE,MAAA,KAAK,EAAE;AACLC,QAAAA,UAAU,EAAE,WADP;AAELC,QAAAA,KAAK,EAAE,MAFF;AAGLC,QAAAA,cAAc,EAAEC,eAAe,GAAG,WAAH,GAAiB;AAH3C,OADT;AAAA,0CAOwBC,IAAI,CAACC,IAAL,CAAUN,YAAV,IAA0B,CAPlD;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAZD;;AAcA,QAAMO,MAAM,GAAGb,MAAM,CAACc,KAAP,CAAa,CAAb,EAAgBC,MAAhB,EAAwBC,GAAxB,CAA4B,CAACR,KAAD,EAAQS,KAAR,kBACzC;AACE,IAAA,GAAG,EAAG,mCAAkCT,KAAM,sBAC5CS,KAAK,GAAG,CACT,EAHH;AAIE,IAAA,GAAG,EAAG,SAAQA,KAAK,GAAG,CAAE,EAJ1B;AAME,IAAA,OAAO,EAAE,MAAMf,gBAAgB,EANjC;AAOE,IAAA,KAAK,EAAE;AACLgB,MAAAA,MAAM,EAAEC,UAAU,KAAK,SAAf,GAA2B,OAAOF,KAAK,GAAG,CAAf,CAA3B,GAA+C;AADlD;AAPT,KAKOT,KALP;AAAA;AAAA;AAAA;AAAA,UADa,CAAf;AAcA,sBACE;AAAA,2BACE;AAAK,MAAA,KAAK,EAAE;AAAEY,QAAAA,KAAK,EAAE,KAAT;AAAgBC,QAAAA,MAAM,EAAE;AAAxB,OAAZ;AAAA,8BACE;AAAI,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD,CACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbF;AAcE,QAAA,0BAA0B,EAAE,CAAC;AAAEhB,UAAAA,YAAF;AAAgBiB,UAAAA;AAAhB,SAAD,KAAkC;AAC5D,iBAAQ,iBAAgBjB,YAAY,GAAG,CAAE,OAAMiB,UAAW,EAA1D;AACD,SAhBH;AAiBE,QAAA,uBAAuB,EAAE,CAAC;AAAEjB,UAAAA;AAAF,SAAD,KACvBD,iBAAiB,CAACC,YAAD,CAlBrB;AAAA,kBAqBGO;AArBH;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,mBADF;AA8BD,CA/DD;;GAAMZ,c;;KAAAA,c;AAiEN,eAAeA,cAAf","sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport Carousel from \"nuka-carousel\";\nimport ReactDom from \"react-dom\";\n\nconst colors = [\"7732bb\", \"047cc0\", \"00884b\", \"e3bc13\", \"db7c00\"];\n// eslint-disable-next-line complexity\nconst CarouselConfig = () => {\n  const handleImageClick = useCallback(() => {\n    setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n  }, []);\n\n  const renderTopControls = (currentSlide) => {\n    return (\n      <div\n        style={{\n          fontFamily: \"Helvetica\",\n          color: \"#fff\",\n          textDecoration: underlineHeader ? \"underline\" : \"none\",\n        }}\n      >\n        Nuka Carousel: Slide {Math.ceil(currentSlide) + 1}\n      </div>\n    );\n  };\n\n  const slides = colors.slice(0, length).map((color, index) => (\n    <img\n      src={`https://via.placeholder.com/400/${color}/ffffff/&text=slide${\n        index + 1\n      }`}\n      alt={`Slide ${index + 1}`}\n      key={color}\n      onClick={() => handleImageClick()}\n      style={{\n        height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n      }}\n    />\n  ));\n\n  return (\n    <>\n      <div style={{ width: \"50%\", margin: \"auto\" }}>\n        <h2 style={{ textAlign: \"center\" }}>Nuka Carousel Demo</h2>\n        <Carousel\n          // animation={animation}\n          // autoplay={autoplay}\n          // cellAlign={cellAlign}\n          // heightMode={heightMode}\n          // scrollMode={scrollMode}\n          // slideIndex={slideIndex}\n          // slideListMargin={0}\n          // slidesToScroll={slidesToScroll}\n          // slidesToShow={slidesToShow}\n          // transitionMode={transitionMode}\n          // withoutControls={withoutControls}\n          // wrapAround={wrapAround}\n          // zoomScale={Number(zoomScale || 0)}\n          renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n            return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n          }}\n          renderTopCenterControls={({ currentSlide }) =>\n            renderTopControls(currentSlide)\n          }\n        >\n          {slides}\n        </Carousel>\n      </div>\n    </>\n  );\n};\n\nexport default CarouselConfig;\n"]},"metadata":{},"sourceType":"module"}