{"ast":null,"code":"// import React, { useState, useCallback } from \"react\";\n// import Carousel from \"nuka-carousel\";\n// // CONFIG DO NOT REMOVE\n// const colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// // eslint-disable-next-line complexity\n// const CarouselConfig = () => {\n//   const [animation, setAnimation] = useState(undefined);\n//   const [autoplay, setAutoplay] = useState(false);\n//   const [cellAlign, setCellAlign] = useState(\"left\");\n//   const [cellSpacing, setCellSpacing] = useState(0);\n//   const [heightMode, setHeightMode] = useState(\"max\");\n//   const [length, setLength] = useState(colors.length);\n//   const [scrollMode, setScrollMode] = useState(\"remainder\");\n//   const [slideIndex, setSlideIndex] = useState(0);\n//   const [slidesToScroll, setSlidesToScroll] = useState(1);\n//   const [slidesToShow, setSlidesToShow] = useState(1);\n//   const [transitionMode, setTransitionMode] = useState(\"scroll\");\n//   const [underlineHeader, setUnderlineHeader] = useState(false);\n//   const [withoutControls, setWithoutControls] = useState(false);\n//   const [wrapAround, setWrapAround] = useState(false);\n//   const [zoomScale, setZoomScale] = useState(0.5);\n//   const handleImageClick = useCallback(() => {\n//     setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n//   }, []);\n//   const renderTopControls = (currentSlide) => {\n//     return (\n//       <div\n//         style={{\n//           fontFamily: \"Helvetica\",\n//           color: \"#fff\",\n//           textDecoration: underlineHeader ? \"underline\" : \"none\",\n//         }}\n//       >\n//         Jane Doe: {Math.ceil(currentSlide) + 1}\n//       </div>\n//     );\n//   };\n//   const slides = colors.slice(0, length).map((color, index) => (\n//     <img\n//       src={`https://via.placeholder.com/400/${color}/ffffff/&text=slide${\n//         index + 1\n//       }`}\n//       alt={`Slide ${index + 1}`}\n//       key={color}\n//       onClick={() => handleImageClick()}\n//       style={{\n//         height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n//       }}\n//     />\n//   ));\n//   return (\n//     <>\n//       <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n//         <Carousel\n//           renderCenterLeftControls={({ previousSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={previousSlide}\n//             >\n//               <i className=\"fa fa-angle-left fa-2x\" />\n//             </div>\n//           )}\n//           renderCenterRightControls={({ nextSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={nextSlide}\n//             >\n//               <i className=\"fa fa-angle-right fa-2x\" />\n//             </div>\n//           )}\n//           animation={animation}\n//           autoplay={autoplay}\n//           cellAlign={cellAlign}\n//           heightMode={heightMode}\n//           scrollMode={scrollMode}\n//           slideIndex={slideIndex}\n//           slideListMargin={0}\n//           slidesToScroll={slidesToScroll}\n//           slidesToShow={slidesToShow}\n//           transitionMode={transitionMode}\n//           withoutControls={withoutControls}\n//           wrapAround={wrapAround}\n//           zoomScale={Number(zoomScale || 0)}\n//           renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n//             return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n//           }}\n//           renderTopCenterControls={({ currentSlide }) =>\n//             renderTopControls(currentSlide)\n//           }\n//         >\n//           {slides}\n//         </Carousel>\n//       </div>\n//     </>\n//   );\n// };\n// export default CarouselConfig;","map":{"version":3,"sources":["/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js"],"names":[],"mappings":"AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import Carousel from \"nuka-carousel\";\n\n// // CONFIG DO NOT REMOVE\n// const colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// // eslint-disable-next-line complexity\n// const CarouselConfig = () => {\n//   const [animation, setAnimation] = useState(undefined);\n//   const [autoplay, setAutoplay] = useState(false);\n//   const [cellAlign, setCellAlign] = useState(\"left\");\n//   const [cellSpacing, setCellSpacing] = useState(0);\n//   const [heightMode, setHeightMode] = useState(\"max\");\n//   const [length, setLength] = useState(colors.length);\n//   const [scrollMode, setScrollMode] = useState(\"remainder\");\n//   const [slideIndex, setSlideIndex] = useState(0);\n//   const [slidesToScroll, setSlidesToScroll] = useState(1);\n//   const [slidesToShow, setSlidesToShow] = useState(1);\n//   const [transitionMode, setTransitionMode] = useState(\"scroll\");\n//   const [underlineHeader, setUnderlineHeader] = useState(false);\n//   const [withoutControls, setWithoutControls] = useState(false);\n//   const [wrapAround, setWrapAround] = useState(false);\n//   const [zoomScale, setZoomScale] = useState(0.5);\n\n//   const handleImageClick = useCallback(() => {\n//     setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n//   }, []);\n\n//   const renderTopControls = (currentSlide) => {\n//     return (\n//       <div\n//         style={{\n//           fontFamily: \"Helvetica\",\n//           color: \"#fff\",\n//           textDecoration: underlineHeader ? \"underline\" : \"none\",\n//         }}\n//       >\n//         Jane Doe: {Math.ceil(currentSlide) + 1}\n//       </div>\n//     );\n//   };\n\n//   const slides = colors.slice(0, length).map((color, index) => (\n//     <img\n//       src={`https://via.placeholder.com/400/${color}/ffffff/&text=slide${\n//         index + 1\n//       }`}\n//       alt={`Slide ${index + 1}`}\n//       key={color}\n//       onClick={() => handleImageClick()}\n//       style={{\n//         height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n//       }}\n//     />\n//   ));\n\n//   return (\n//     <>\n//       <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n//         <Carousel\n//           renderCenterLeftControls={({ previousSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={previousSlide}\n//             >\n//               <i className=\"fa fa-angle-left fa-2x\" />\n//             </div>\n//           )}\n//           renderCenterRightControls={({ nextSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={nextSlide}\n//             >\n//               <i className=\"fa fa-angle-right fa-2x\" />\n//             </div>\n//           )}\n//           animation={animation}\n//           autoplay={autoplay}\n//           cellAlign={cellAlign}\n//           heightMode={heightMode}\n//           scrollMode={scrollMode}\n//           slideIndex={slideIndex}\n//           slideListMargin={0}\n//           slidesToScroll={slidesToScroll}\n//           slidesToShow={slidesToShow}\n//           transitionMode={transitionMode}\n//           withoutControls={withoutControls}\n//           wrapAround={wrapAround}\n//           zoomScale={Number(zoomScale || 0)}\n//           renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n//             return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n//           }}\n//           renderTopCenterControls={({ currentSlide }) =>\n//             renderTopControls(currentSlide)\n//           }\n//         >\n//           {slides}\n//         </Carousel>\n\n//       </div>\n//     </>\n//   );\n// };\n\n// export default CarouselConfig;\n"]},"metadata":{},"sourceType":"module"}