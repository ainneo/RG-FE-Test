{"ast":null,"code":"var _jsxFileName = \"/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js\",\n    _s = $RefreshSig$();\n\n// import React, { useState, useCallback } from \"react\";\n// import Carousel from \"nuka-carousel\";\n// // CONFIG DO NOT REMOVE\n// const colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// // eslint-disable-next-line complexity\n// const CarouselConfig = () => {\n//   const [animation, setAnimation] = useState(undefined);\n//   const [autoplay, setAutoplay] = useState(false);\n//   const [cellAlign, setCellAlign] = useState(\"left\");\n//   const [cellSpacing, setCellSpacing] = useState(0);\n//   const [heightMode, setHeightMode] = useState(\"max\");\n//   const [length, setLength] = useState(colors.length);\n//   const [scrollMode, setScrollMode] = useState(\"remainder\");\n//   const [slideIndex, setSlideIndex] = useState(0);\n//   const [slidesToScroll, setSlidesToScroll] = useState(1);\n//   const [slidesToShow, setSlidesToShow] = useState(1);\n//   const [transitionMode, setTransitionMode] = useState(\"scroll\");\n//   const [underlineHeader, setUnderlineHeader] = useState(false);\n//   const [withoutControls, setWithoutControls] = useState(false);\n//   const [wrapAround, setWrapAround] = useState(false);\n//   const [zoomScale, setZoomScale] = useState(0.5);\n//   const handleImageClick = useCallback(() => {\n//     setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n//   }, []);\n//   const renderTopControls = (currentSlide) => {\n//     return (\n//       <div\n//         style={{\n//           fontFamily: \"Helvetica\",\n//           color: \"#fff\",\n//           textDecoration: underlineHeader ? \"underline\" : \"none\",\n//         }}\n//       >\n//         Jane Doe: {Math.ceil(currentSlide) + 1}\n//       </div>\n//     );\n//   };\n//   const slides = colors.slice(0, length).map((color, index) => (\n//     <img\n//       src={`https://via.placeholder.com/400/${color}/ffffff/&text=slide${\n//         index + 1\n//       }`}\n//       alt={`Slide ${index + 1}`}\n//       key={color}\n//       onClick={() => handleImageClick()}\n//       style={{\n//         height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n//       }}\n//     />\n//   ));\n//   return (\n//     <>\n//       <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n//         <Carousel\n//           renderCenterLeftControls={({ previousSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={previousSlide}\n//             >\n//               <i className=\"fa fa-angle-left fa-2x\" />\n//             </div>\n//           )}\n//           renderCenterRightControls={({ nextSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={nextSlide}\n//             >\n//               <i className=\"fa fa-angle-right fa-2x\" />\n//             </div>\n//           )}\n//           animation={animation}\n//           autoplay={autoplay}\n//           cellAlign={cellAlign}\n//           heightMode={heightMode}\n//           scrollMode={scrollMode}\n//           slideIndex={slideIndex}\n//           slideListMargin={0}\n//           slidesToScroll={slidesToScroll}\n//           slidesToShow={slidesToShow}\n//           transitionMode={transitionMode}\n//           withoutControls={withoutControls}\n//           wrapAround={wrapAround}\n//           zoomScale={Number(zoomScale || 0)}\n//           renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n//             return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n//           }}\n//           renderTopCenterControls={({ currentSlide }) =>\n//             renderTopControls(currentSlide)\n//           }\n//         >\n//           {slides}\n//         </Carousel>\n//       </div>\n//     </>\n//   );\n// };\n// export default CarouselConfig;\nimport React, { useState, useCallback } from \"react\";\nimport Carousel from \"nuka-carousel\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"]; // eslint-disable-next-line complexity\n\nconst CarouselConfig = () => {\n  _s();\n\n  const [animation, setAnimation] = useState(undefined);\n  const [autoplay, setAutoplay] = useState(false);\n  const [cellAlign, setCellAlign] = useState(\"left\");\n  const [cellSpacing, setCellSpacing] = useState(0);\n  const [heightMode, setHeightMode] = useState(\"max\");\n  const [length, setLength] = useState(colors.length);\n  const [scrollMode, setScrollMode] = useState(\"remainder\");\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [slidesToScroll, setSlidesToScroll] = useState(1);\n  const [slidesToShow, setSlidesToShow] = useState(1);\n  const [transitionMode, setTransitionMode] = useState(\"scroll\");\n  const [underlineHeader, setUnderlineHeader] = useState(false);\n  const [withoutControls, setWithoutControls] = useState(false);\n  const [wrapAround, setWrapAround] = useState(false);\n  const [zoomScale, setZoomScale] = useState(0.5);\n  const handleImageClick = useCallback(() => {\n    setUnderlineHeader(prevUnderlineHeader => !prevUnderlineHeader);\n  }, []);\n  const handleZoomScaleChange = useCallback(event => {\n    setZoomScale(event.target.value);\n  }, []);\n\n  const renderTopControls = currentSlide => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        fontFamily: \"Helvetica\",\n        color: \"#fff\",\n        textDecoration: underlineHeader ? \"underline\" : \"none\"\n      },\n      children: [\"Nuka Carousel: Slide \", Math.ceil(currentSlide) + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this);\n  };\n\n  const slides = colors.slice(0, length).map((color, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n    src: `https://via.placeholder.com/400/${color}/ffffff/&text=slide${index + 1}`,\n    alt: `Slide ${index + 1}`,\n    onClick: () => handleImageClick(),\n    style: {\n      height: heightMode === \"current\" ? 100 * (index + 1) : 400\n    }\n  }, color, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"50%\",\n        margin: \"auto\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"Nuka Carousel Demo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Carousel, {\n        cellSpacing: cellSpacing,\n        animation: animation,\n        autoplay: autoplay,\n        cellAlign: cellAlign,\n        heightMode: heightMode,\n        scrollMode: scrollMode,\n        slideIndex: slideIndex,\n        slideListMargin: 0,\n        slidesToScroll: slidesToScroll,\n        slidesToShow: slidesToShow,\n        transitionMode: transitionMode,\n        withoutControls: withoutControls,\n        wrapAround: wrapAround,\n        zoomScale: Number(zoomScale || 0),\n        renderAnnounceSlideMessage: ({\n          currentSlide,\n          slideCount\n        }) => {\n          return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n        },\n        renderTopCenterControls: ({\n          currentSlide\n        }) => renderTopControls(currentSlide),\n        children: slides\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(CarouselConfig, \"hGrI2XCz7T2RnQsgaKa3WrVWC/c=\");\n\n_c = CarouselConfig;\nexport default CarouselConfig;\n\nvar _c;\n\n$RefreshReg$(_c, \"CarouselConfig\");","map":{"version":3,"sources":["/Users/ainneoum/Projects/grm-test/src/components/SectionSix/CarouselConfig.js"],"names":["React","useState","useCallback","Carousel","colors","CarouselConfig","animation","setAnimation","undefined","autoplay","setAutoplay","cellAlign","setCellAlign","cellSpacing","setCellSpacing","heightMode","setHeightMode","length","setLength","scrollMode","setScrollMode","slideIndex","setSlideIndex","slidesToScroll","setSlidesToScroll","slidesToShow","setSlidesToShow","transitionMode","setTransitionMode","underlineHeader","setUnderlineHeader","withoutControls","setWithoutControls","wrapAround","setWrapAround","zoomScale","setZoomScale","handleImageClick","prevUnderlineHeader","handleZoomScaleChange","event","target","value","renderTopControls","currentSlide","fontFamily","color","textDecoration","Math","ceil","slides","slice","map","index","height","width","margin","textAlign","Number","slideCount"],"mappings":"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","sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import Carousel from \"nuka-carousel\";\n\n// // CONFIG DO NOT REMOVE\n// const colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// // eslint-disable-next-line complexity\n// const CarouselConfig = () => {\n//   const [animation, setAnimation] = useState(undefined);\n//   const [autoplay, setAutoplay] = useState(false);\n//   const [cellAlign, setCellAlign] = useState(\"left\");\n//   const [cellSpacing, setCellSpacing] = useState(0);\n//   const [heightMode, setHeightMode] = useState(\"max\");\n//   const [length, setLength] = useState(colors.length);\n//   const [scrollMode, setScrollMode] = useState(\"remainder\");\n//   const [slideIndex, setSlideIndex] = useState(0);\n//   const [slidesToScroll, setSlidesToScroll] = useState(1);\n//   const [slidesToShow, setSlidesToShow] = useState(1);\n//   const [transitionMode, setTransitionMode] = useState(\"scroll\");\n//   const [underlineHeader, setUnderlineHeader] = useState(false);\n//   const [withoutControls, setWithoutControls] = useState(false);\n//   const [wrapAround, setWrapAround] = useState(false);\n//   const [zoomScale, setZoomScale] = useState(0.5);\n\n//   const handleImageClick = useCallback(() => {\n//     setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n//   }, []);\n\n//   const renderTopControls = (currentSlide) => {\n//     return (\n//       <div\n//         style={{\n//           fontFamily: \"Helvetica\",\n//           color: \"#fff\",\n//           textDecoration: underlineHeader ? \"underline\" : \"none\",\n//         }}\n//       >\n//         Jane Doe: {Math.ceil(currentSlide) + 1}\n//       </div>\n//     );\n//   };\n\n//   const slides = colors.slice(0, length).map((color, index) => (\n//     <img\n//       src={`https://via.placeholder.com/400/${color}/ffffff/&text=slide${\n//         index + 1\n//       }`}\n//       alt={`Slide ${index + 1}`}\n//       key={color}\n//       onClick={() => handleImageClick()}\n//       style={{\n//         height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n//       }}\n//     />\n//   ));\n\n//   return (\n//     <>\n//       <div style={{ width: \"100%\", margin: \"auto\", color: \"grey\" }}>\n//         <Carousel\n//           renderCenterLeftControls={({ previousSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={previousSlide}\n//             >\n//               <i className=\"fa fa-angle-left fa-2x\" />\n//             </div>\n//           )}\n//           renderCenterRightControls={({ nextSlide }) => (\n//             <div\n//               style={{ background: \"none\", color: \"purple\" }}\n//               onClick={nextSlide}\n//             >\n//               <i className=\"fa fa-angle-right fa-2x\" />\n//             </div>\n//           )}\n//           animation={animation}\n//           autoplay={autoplay}\n//           cellAlign={cellAlign}\n//           heightMode={heightMode}\n//           scrollMode={scrollMode}\n//           slideIndex={slideIndex}\n//           slideListMargin={0}\n//           slidesToScroll={slidesToScroll}\n//           slidesToShow={slidesToShow}\n//           transitionMode={transitionMode}\n//           withoutControls={withoutControls}\n//           wrapAround={wrapAround}\n//           zoomScale={Number(zoomScale || 0)}\n//           renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n//             return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n//           }}\n//           renderTopCenterControls={({ currentSlide }) =>\n//             renderTopControls(currentSlide)\n//           }\n//         >\n//           {slides}\n//         </Carousel>\n\n//       </div>\n//     </>\n//   );\n// };\n\n// export default CarouselConfig;\nimport React, { useState, useCallback } from \"react\";\nimport Carousel from \"nuka-carousel\";\n\nconst colors = [\"#fffff\", \"#ffffff\", \"#ffffff\"];\n// eslint-disable-next-line complexity\nconst CarouselConfig = () => {\n  const [animation, setAnimation] = useState(undefined);\n  const [autoplay, setAutoplay] = useState(false);\n  const [cellAlign, setCellAlign] = useState(\"left\");\n  const [cellSpacing, setCellSpacing] = useState(0);\n  const [heightMode, setHeightMode] = useState(\"max\");\n  const [length, setLength] = useState(colors.length);\n  const [scrollMode, setScrollMode] = useState(\"remainder\");\n  const [slideIndex, setSlideIndex] = useState(0);\n  const [slidesToScroll, setSlidesToScroll] = useState(1);\n  const [slidesToShow, setSlidesToShow] = useState(1);\n  const [transitionMode, setTransitionMode] = useState(\"scroll\");\n  const [underlineHeader, setUnderlineHeader] = useState(false);\n  const [withoutControls, setWithoutControls] = useState(false);\n  const [wrapAround, setWrapAround] = useState(false);\n  const [zoomScale, setZoomScale] = useState(0.5);\n\n  const handleImageClick = useCallback(() => {\n    setUnderlineHeader((prevUnderlineHeader) => !prevUnderlineHeader);\n  }, []);\n\n  const handleZoomScaleChange = useCallback((event) => {\n    setZoomScale(event.target.value);\n  }, []);\n\n  const renderTopControls = (currentSlide) => {\n    return (\n      <div\n        style={{\n          fontFamily: \"Helvetica\",\n          color: \"#fff\",\n          textDecoration: underlineHeader ? \"underline\" : \"none\",\n        }}\n      >\n        Nuka Carousel: Slide {Math.ceil(currentSlide) + 1}\n      </div>\n    );\n  };\n\n  const slides = colors.slice(0, length).map((color, index) => (\n    <img\n      src={`https://via.placeholder.com/400/${color}/ffffff/&text=slide${\n        index + 1\n      }`}\n      alt={`Slide ${index + 1}`}\n      key={color}\n      onClick={() => handleImageClick()}\n      style={{\n        height: heightMode === \"current\" ? 100 * (index + 1) : 400,\n      }}\n    />\n  ));\n\n  return (\n    <>\n      <div style={{ width: \"50%\", margin: \"auto\" }}>\n        <h2 style={{ textAlign: \"center\" }}>Nuka Carousel Demo</h2>\n        <Carousel\n          cellSpacing={cellSpacing}\n          animation={animation}\n          autoplay={autoplay}\n          cellAlign={cellAlign}\n          heightMode={heightMode}\n          scrollMode={scrollMode}\n          slideIndex={slideIndex}\n          slideListMargin={0}\n          slidesToScroll={slidesToScroll}\n          slidesToShow={slidesToShow}\n          transitionMode={transitionMode}\n          withoutControls={withoutControls}\n          wrapAround={wrapAround}\n          zoomScale={Number(zoomScale || 0)}\n          renderAnnounceSlideMessage={({ currentSlide, slideCount }) => {\n            return `Showing slide ${currentSlide + 1} of ${slideCount}`;\n          }}\n          renderTopCenterControls={({ currentSlide }) =>\n            renderTopControls(currentSlide)\n          }\n        >\n          {slides}\n        </Carousel>\n      </div>\n    </>\n  );\n};\nexport default CarouselConfig;\n"]},"metadata":{},"sourceType":"module"}